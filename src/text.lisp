(in-package :clods-export)

(defparameter *line-types* '(:none :single :double)
  "The valid ODS line types.")

(defparameter *line-styles* '(:none :solid :dotted :dash :long-dash :dot-dash :dot-dot-dash :wave)
  "The valid ODS line styles.")

(defparameter *line-widths* '(:auto :normal :bold :thin :medium :thick)
  "The valid line widths. Alternatively, a standard CSS length spec can be used (e.g. \"2pt\" or \"0.1cm\").")

(defparameter *line-modes* '(:continuous :skip-white-space)
  "The valid line modes.")

(defparameter *text-transforms* '(:none :lowercase :uppercase :capitalize)
  "The valid text transformations.")

(defparameter *script-types* '(:latin :asian :complex :ignore)
  "The valid script types.")

(defparameter *font-pitches* '(:fixed :variable)
  "The list of font pitches supported by ODS documents.")

(defparameter *font-reliefs* '(:none :embossed :engraved)
  "The valid font relief modes.")

(defun validate-font-weight (x)
  "Check that the given datum is a valid font weight."
  (or (and (keywordp x)
	   (member x *font-weights*))
      (and (integerp x)
	   (zerop (mod x 100))
	   (<= 100 x 900))))

(defparameter *text-property-defs*
  (list (list :font-variant "fo" *font-variants*)
	(list :text-transform "fo" *text-transforms*)
	(list :color "fo" #'valid-color)
	(list :use-window-font-color "style" 'boolean)
	(list :text-outline "style" 'boolean)
	(list :text-line-through-type "style" *line-types*)
	(list :text-line-through-style "style" *line-styles*)
	(list :text-line-through-width "style" *line-widths*)
	(list :text-line-through-color "style" #'(lambda (x) (or (eq x :font-color) (valid-color x))))
	(list :text-line-through-mode "style" *line-modes*)
	(list :text-line-through-text "style" 'string)
	(list :text-line-through-text-style "style" 'string)
	(list :text-position "style" '(:super :sub))
	(list :font-name "style" 'string)
	(list :font-name-asian "style" 'string)
	(list :font-name-complex "style" 'string)
	(list :font-family "style" 'string)
	(list :font-family-asian "style" 'string)
	(list :font-family-complex "style" 'string)
	(list :font-family-generic "style" *font-generic-families*)
	(list :font-family-generic-asian "style" *font-generic-families*)
	(list :font-family-generic-complex "style" *font-generic-families*)
	(list :font-style-name "style" 'string)
	(list :font-style-name-asian "style" 'string)
	(list :font-style-name-complex "style" 'string)
	(list :font-pitch "style" *font-pitches*)
	(list :font-pitch-asian "style" *font-pitches*)
	(list :font-pitch-complex "style" *font-pitches*)
	(list :font-size "fo" 'string)
	(list :font-size-asian "style" 'string)
	(list :font-size-complex "style" 'string)
	(list :font-size-rel "style" 'string)
	(list :font-size-rel-asian "style" 'string)
	(list :font-size-rel-complex "style" 'string)
	(list :script-type "style" *script-types*)
	(list :letter-spacing "fo" 'string)
	(list :font-style "fo" *font-styles*)
	(list :font-style-asian "style" *font-styles*)
	(list :font-style-complex "style" *font-styles*)
	(list :font-relief "style" *font-reliefs*)
	(list :text-shadow "fo" 'string)
	(list :text-underline-type "style" *line-types*)
	(list :text-underline-style "style" *line-styles*)
	(list :text-underline-width "style" *line-widths*)
	(list :text-underline-color "style" #'(lambda (x) (or (eq x :font-color) (valid-color x))))
	(list :text-underline-mode "style" *line-modes*)
	(list :text-overline-type "style" *line-types*)
	(list :text-overline-style "style" *line-styles*)
	(list :text-overline-width "style" *line-widths*)
	(list :text-overline-color "style" #'(lambda (x) (or (eq x :font-color) (valid-color x))))
	(list :text-overline-mode "style" *line-modes*)
	(list :font-weight "fo" #'validate-font-weight)
	(list :font-weight-asian "style" #'validate-font-weight)
	(list :font-weight-complex "style" #'validate-font-weight)
	(list :letter-kerning "style" 'boolean)
	(list :text-blinking "style" 'boolean)
	(list :text-combine "style" '(:none :letters :lines))
	(list :text-emphasize "style" '((:none :accent :dot :circle :disc) (:above :below)))
	(list :text-scale "style" 'string)
	(list :text-rotation-angle "style" 'string)
	(list :text-rotation-scale "style" '(:fixed :line-height))
	(list :hyphenate "fo" 'boolean)
	(list :hyphenation-remain-char-count "fo" 'integer)
	(list :hyphenation-push-char-count "fo" 'integer))
  "The set of text properties supported, with the validation rules for their content.")

(defparameter *text-properties* (mapcar #'first *text-property-defs*)
  "The set of supported keywords for text-properties.")

(defun write-text-properties (props)
  "Write a list containing text properties into the XML document."
  (flet ((any-value (x)
	   (etypecase x
	     (string x)
	     (symbol (string-downcase x))
	     (number (princ-number x)))))
    (with-element* ("style" "text-properties")
      (loop for (kw data) on props by #'cddr
	    for (nil ns constr) = (find kw *text-property-defs* :key #'first)
	    do (check-type kw keyword)
	    unless ns do (error "unknown text property: ~s" kw)
	    do (attribute* ns (string-downcase kw)
			   (cond ((eq 'string constr)
				  (check-type data string)
				  data)
				 ((eq 'integer constr)
				  (check-type data integer)
				  (princ-to-string data))
				 ((eq 'boolean constr)
				  (if data "true" "false"))
				 ((functionp constr)
				  (unless (funcall constr data)
				    #1=(error "invalid value ~s for text property ~s" data kw))
				  (any-value data))
				 ((and (listp constr) (listp (first constr)))
				  (check-type data list)
				  (apply #'concatenate 'string
					 (iter (for i in data)
					       (for c in constr)
					       (unless (find i c)
						 #1#)
					       (unless (eq i (first data))
						 (collect " "))
					       (collect (any-value i)))))
				 ((listp constr)
				  (unless (find data constr)
				    #1#)
				  (any-value data))))))))
